# Problem 2: Even Fibonacci Numbers

# Each new term in the Fibonacci sequence is generated by adding the previous 
# two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not 
# exceed four million, find the sum of the even-valued terms.

# recursive (slow)
def evenFibsRecursive():
    evens = [0]
    
    def fibs(n):
        memo = {1: 1, 2: 2}
        if n in memo: return memo[n]
        
        memo[n] = fibs(n-1) + fibs(n-2)
        return memo[n]
    
    fibIdx = 1
    while evens[-1] < 4000000:
        num = fibs(fibIdx)
        if num % 2 == 0: evens.append(num) 
        fibIdx +=1

    return evens

def evenFibsIterative():
    evens = [2]
    
    first, second = 1, 2
    nextSum = None
    
    while nextSum < 4000000:
        nextSum = second + first
        if nextSum % 2 == 0: evens.append(nextSum)
        
        first = second
        second = second + first
    
    return evens

a = evenFibsIterative()
print(a)

    
    
    

    
